# generated by appcreator

from django.db import models
from django.urls import reverse
from django.contrib.postgres.fields import DateRangeField

from vocabs.models import SkosConcept

from browsing.browsing_utils import model_to_dict


def set_extra(self, **kwargs):
    self.extra = kwargs
    return self


models.Field.set_extra = set_extra


class Autor(models.Model):
    ### Beschreibt einen Autor ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name",
        help_text="Name",
    ).set_extra(
        is_public=True,
        data_lookup="autor",
        arche_prop="hasTitle",
    )
    name_gnd = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name (GND)",
        help_text="Name (GND)",
    ).set_extra(
        is_public=True,
        data_lookup="autor_GND",
        arche_prop="hasAlternativeName",
    )
    gnd_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="GND-ID",
        help_text="GND-ID",
    ).set_extra(
        is_public=True,
        data_lookup="GND",
    )
    biogr_daten = models.TextField(
        blank=True, null=True,
        verbose_name="Kurzbio",
        help_text="Kurbiographie",
    ).set_extra(
        is_public=True,
        data_lookup="biogr_daten",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'name',
        ]
        verbose_name = "Autor"
    
    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:autor_browse')
    
    @classmethod
    def get_source_table(self):
        return "aut"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "name"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:autor_create')

    def get_absolute_url(self):
        return reverse('archiv:autor_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:autor_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:autor_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:autor_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:autor_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:autor_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Bibliothek(models.Model):
    ### Beschreibt eine Bibliothek ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    lib_code = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Bibliothekscode",
        help_text="Bibliothekscode",
    ).set_extra(
        is_public=True,
        data_lookup="IDlibrary",
        arche_prop="hasNonLinkedIdentifier",
    )
    lib_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name",
        help_text="Name",
    ).set_extra(
        is_public=True,
        data_lookup="library_name",
        arche_prop="hasTitle",
    )
    lib_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_bibliothek_lib_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Art der Bibliothek",
        help_text="Art der Bibliothek",
    ).set_extra(
        is_public=True,
        data_lookup="library_type",
    )
    short_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name (Abkürzung)",
        help_text="Name (Abkürzung)",
    ).set_extra(
        is_public=True,
        data_lookup="library_name_short",
        arche_prop="hasAlternativeTitle",
    )
    location = models.ForeignKey(
        "Place",
        related_name='rvn_bibliothek_location_place',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Ort",
        help_text="Ort",
    ).set_extra(
        is_public=True,
        data_lookup="location",
    )
    address = models.TextField(
        blank=True, null=True,
        verbose_name="Adresse",
        help_text="Adresse",
    ).set_extra(
        is_public=True,
        data_lookup="address",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'lib_name',
        ]
        verbose_name = "Bibliothek"
    
    def __str__(self):
        if self.lib_code:
            return "{}".format(self.lib_code)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:bibliothek_browse')
    
    @classmethod
    def get_source_table(self):
        return "library"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "lib_code"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:bibliothek_create')

    def get_absolute_url(self):
        return reverse('archiv:bibliothek_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:bibliothek_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:bibliothek_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:bibliothek_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:bibliothek_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:bibliothek_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Initium(models.Model):
    ### Beschreibt Initia ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=True,
        data_lookup="ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    manuscript = models.ForeignKey(
        "Manuscript",
        related_name='rvn_initium_manuscript_manuscript',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Manuscript",
        help_text="Manuscript",
    ).set_extra(
        is_public=True,
        data_lookup="ms_code",
    )
    initium = models.TextField(
        blank=True, null=True,
        verbose_name="Inititum",
        help_text="Initium",
    ).set_extra(
        is_public=True,
        data_lookup="Initium",
    )
    explicit = models.TextField(
        blank=True, null=True,
        verbose_name="Explicit",
        help_text="Explicit",
    ).set_extra(
        is_public=True,
        data_lookup="explicit",
    )
    fol = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folio",
        help_text="Folio",
    ).set_extra(
        is_public=True,
        data_lookup="fol",
    )
    fol_sort = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folio (sort)",
        help_text="Folio (sort)",
    ).set_extra(
        is_public=True,
        data_lookup="fol_sort",
    )
    fol_end = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folio (end)",
        help_text="Folio (end)",
    ).set_extra(
        is_public=True,
        data_lookup="fol_end",
    )
    signtaur_fol = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Signatur (Folio)",
        help_text="Signatur (Folio)",
    ).set_extra(
        is_public=True,
        data_lookup="Signatur_fol",
    )
    titel_vorspann = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Titelvorspann",
        help_text="Titelvorspann",
    ).set_extra(
        is_public=True,
        data_lookup="titelvorspann",
    )
    titel = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Titel",
        help_text="Titel",
    ).set_extra(
        is_public=True,
        data_lookup="titel",
    )
    sprache = models.ForeignKey(
        SkosConcept,
        related_name='rvn_initium_sprache_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Sprache",
        help_text="Sprache",
    ).set_extra(
        is_public=True,
        data_lookup="sprache",
    )
    werk = models.ForeignKey(
        "WerkInstanz",
        related_name='rvn_initium_werk_werkinstanz',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Werk",
        help_text="Werk",
    ).set_extra(
        is_public=True,
        data_lookup="IDaut",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'legacy_pk',
        ]
        verbose_name = "Initium"
    
    def __str__(self):
        if self.legacy_pk:
            return "{}".format(self.legacy_pk)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:initium_browse')
    
    @classmethod
    def get_source_table(self):
        return "initia"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:initium_create')

    def get_absolute_url(self):
        return reverse('archiv:initium_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:initium_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:initium_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:initium_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:initium_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:initium_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Literatur(models.Model):
    ### Literatur ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=True,
        data_lookup="ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    kurz_zitat = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Kurzzitat",
        help_text="Kurzzitat",
    ).set_extra(
        is_public=True,
        data_lookup="K123ID",
    )
    autor_nachname = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Autor (Nachname)",
        help_text="Autor (Nachname)",
    ).set_extra(
        is_public=True,
        data_lookup="Autor",
    )
    jahr = models.IntegerField(
        blank=True, null=True,
        verbose_name="Jahr",
        help_text="Erscheinungsjahr",
    ).set_extra(
        is_public=True,
        data_lookup="Jahr",
    )
    nr = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Nr. ",
        help_text="Nr. ",
    ).set_extra(
        is_public=True,
        data_lookup="Nr",
    )
    kz = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="KZ",
        help_text="KZ",
    ).set_extra(
        is_public=True,
        data_lookup="KZ",
    )
    vollzitat = models.TextField(
        blank=True, null=True,
        verbose_name="Vollzitat",
        help_text="Vollzitat",
    ).set_extra(
        is_public=True,
        data_lookup="Literaturzitat",
    )
    anmerkung = models.TextField(
        blank=True, null=True,
        verbose_name="Anmerkung",
        help_text="Anmerkung",
    ).set_extra(
        is_public=True,
        data_lookup="Anmerkungen",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'kurz_zitat',
        ]
        verbose_name = "Literatur"
    
    def __str__(self):
        if self.kurz_zitat:
            return "{}".format(self.kurz_zitat)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:literatur_browse')
    
    @classmethod
    def get_source_table(self):
        return "lit"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:literatur_create')

    def get_absolute_url(self):
        return reverse('archiv:literatur_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:literatur_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:literatur_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:literatur_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:literatur_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:literatur_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Manuscript(models.Model):
    ### Beschreibt ein Manuscript ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=False,
        data_lookup="ID",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="Primärschlüssel Alt: <value>",
    )
    lib_code = models.ForeignKey(
        "Bibliothek",
        related_name='rvn_manuscript_lib_code_bibliothek',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Bibliothek",
        help_text="Bibliothek",
    ).set_extra(
        is_public=True,
        data_lookup="libCode",
    )
    ms_code = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="MS-Code",
        help_text="MS-Code",
    ).set_extra(
        is_public=True,
        data_lookup="ms_code",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="MS-CODE: <value>",
    )
    ms_code_sort = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="MS-Code (Sortierung)",
        help_text="MS-Code (Sortierung)",
    ).set_extra(
        is_public=True,
        data_lookup="ms_code_sort",
    )
    shelfmark = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Signatur",
        help_text="Signatur",
    ).set_extra(
        is_public=True,
        data_lookup="shelfmark",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="Signatur: <value>",
    )
    heading = models.TextField(
        blank=True, null=True,
        verbose_name="Heading",
        help_text="Heading",
    ).set_extra(
        is_public=True,
        data_lookup="heading",
        arche_prop="hasAlternativeTitle",
    )
    material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_manuscript_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material",
        help_text="Material",
    ).set_extra(
        is_public=True,
        data_lookup="material",
    )
    num_leaves = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Umfang",
        help_text="Umfang (Anzahl der Blätter)",
    ).set_extra(
        is_public=True,
        data_lookup="num_leaves",
        arche_prop="hasExtent",
        arche_prop_str_template="Number of leaves: <value>",
    )
    dimensions = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Dimensionen",
        help_text="Dimensionen",
    ).set_extra(
        is_public=True,
        data_lookup="dimensions",
        arche_prop="hasExtent",
        arche_prop_str_template="Dimensionen: <value>",
    )
    origin_date = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Entstehungsdatum",
        help_text="Entstehungsdatum",
    ).set_extra(
        is_public=True,
        data_lookup="origin_date",
        arche_prop="hasNote",
        arche_prop_str_template="Entstehungsdatum: <value>",
    )
    prov = models.TextField(
        blank=True, null=True,
        verbose_name="Provenienz",
        help_text="Provenienz",
    ).set_extra(
        is_public=True,
        data_lookup="prov",
        arche_prop="hasNote",
    )
    fragm = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Fragm",
        help_text="Fragm",
    ).set_extra(
        is_public=True,
        data_lookup="fragm",
    )
    hscensus = models.IntegerField(
        blank=True, null=True,
        verbose_name="hscensus",
        help_text="hscensus",
    ).set_extra(
        is_public=True,
        data_lookup="hscensus",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="hscensus: <value>",
    )
    remarks = models.TextField(
        blank=True, null=True,
        verbose_name="Anmerkungen",
        help_text="Anmerkungen",
    ).set_extra(
        is_public=True,
        data_lookup="remarks",
        arche_prop="hasNotes",
    )
    geschichte = models.TextField(
        blank=True, null=True,
        verbose_name="Geschichte",
        help_text="Geschichte",
    ).set_extra(
        is_public=True,
        data_lookup="geschichte",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'ms_code_sort',
        ]
        verbose_name = "Manuscript"
    
    def __str__(self):
        if self.ms_code:
            return "{}".format(self.ms_code)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:manuscript_browse')
    
    @classmethod
    def get_source_table(self):
        return "manuscripts"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "ms_code"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:manuscript_create')

    def get_absolute_url(self):
        return reverse('archiv:manuscript_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:manuscript_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:manuscript_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:manuscript_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:manuscript_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:manuscript_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class MsDesc(models.Model):
    ### Handschriftenbeschreibung ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=True,
        data_lookup="ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    manuscript = models.ForeignKey(
        "Manuscript",
        related_name='rvn_msdesc_manuscript_manuscript',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Manuscript",
        help_text="Manuscript",
    ).set_extra(
        is_public=True,
        data_lookup="ms_code",
    )
    bibliography = models.TextField(
        blank=True, null=True,
        verbose_name="Bibliographie",
        help_text="Bibliographie",
    ).set_extra(
        is_public=True,
        data_lookup="bibliography",
    )
    phys_desc = models.TextField(
        blank=True, null=True,
        verbose_name="phys_desc",
        help_text="phys_desc",
    ).set_extra(
        is_public=True,
        data_lookup="phys_desc",
    )
    content = models.TextField(
        blank=True, null=True,
        verbose_name="content",
        help_text="content",
    ).set_extra(
        is_public=True,
        data_lookup="content",
    )
    verfasser = models.ForeignKey(
        "Verfasser",
        related_name='rvn_msdesc_verfasser_verfasser',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Verfasser*In",
        help_text="Verfasser*In",
    ).set_extra(
        is_public=True,
        data_lookup="verfasser",
    )
    created = models.DateField(
        blank=True, null=True,
        verbose_name="Erstellungsdatum",
        help_text="Erstellungsdatum",
    ).set_extra(
        is_public=True,
        data_lookup="created",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'legacy_pk',
        ]
        verbose_name = "Manuscript Description"
    
    def __str__(self):
        if self.legacy_pk:
            return "{}".format(self.legacy_pk)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:msdesc_browse')
    
    @classmethod
    def get_source_table(self):
        return "mssdesc"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:msdesc_create')

    def get_absolute_url(self):
        return reverse('archiv:msdesc_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:msdesc_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:msdesc_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:msdesc_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:msdesc_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:msdesc_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class MsPart(models.Model):
    ### Beschreibt einen Teil einer Handschrift ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=False,
        data_lookup="IDparts",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="Primärschlüssel Alt: <value>",
    )
    part_of_manuscript = models.ForeignKey(
        "Manuscript",
        related_name='rvn_mspart_part_of_manuscript_manuscript',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Teil von Handschrift",
        help_text="Teil von Handschrift",
    ).set_extra(
        is_public=True,
        data_lookup="ms_code",
    )
    range = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="von-bis",
        help_text="von-bis",
    ).set_extra(
        is_public=True,
        data_lookup="range",
        arche_prop="hasExtent",
        arche_prop_str_template="von-bis: <value>",
    )
    date_str = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Datum (str)",
        help_text="Datum (str)",
    ).set_extra(
        is_public=True,
        data_lookup="date_str",
    )
    origin_date = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Datum (orig)",
        help_text="Datum (orig)",
    ).set_extra(
        is_public=True,
        data_lookup="origin_date",
    )
    date_begin = models.DateField(
        blank=True, null=True,
        verbose_name="Datum (start, norm)",
        help_text="Datum (start, norm)",
    ).set_extra(
        is_public=True,
        data_lookup="date_begin",
    )
    date_end = models.DateField(
        blank=True, null=True,
        verbose_name="Datum (end, norm)",
        help_text="Datum (end, norm)",
    ).set_extra(
        is_public=True,
        data_lookup="date_end",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'legacy_pk',
        ]
        verbose_name = "MsPart"
    
    def __str__(self):
        if self.legacy_pk:
            return "{}".format(self.legacy_pk)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:mspart_browse')
    
    @classmethod
    def get_source_table(self):
        return "mss_teile"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:mspart_create')

    def get_absolute_url(self):
        return reverse('archiv:mspart_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:mspart_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:mspart_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:mspart_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:mspart_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:mspart_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Place(models.Model):
    ### Beschreibt einen Ort ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Ortsname",
        help_text="Ortsname",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'name',
        ]
        verbose_name = "Place"
    
    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:place_browse')
    
    @classmethod
    def get_source_table(self):
        return None
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "name"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:place_create')

    def get_absolute_url(self):
        return reverse('archiv:place_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:place_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:place_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:place_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:place_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:place_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Verfasser(models.Model):
    ### Beschreibt Verfasser*in einer Beschreibung ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name",
        help_text="Name",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'name',
        ]
        verbose_name = "Verfasser"
    
    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:verfasser_browse')
    
    @classmethod
    def get_source_table(self):
        return None
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "name"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:verfasser_create')

    def get_absolute_url(self):
        return reverse('archiv:verfasser_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:verfasser_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:verfasser_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:verfasser_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:verfasser_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:verfasser_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class WebLit(models.Model):
    ### Link zu Literatur ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=True,
        data_lookup="ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    url = models.TextField(
        blank=True, null=True,
        verbose_name="URL",
        help_text="URL",
    ).set_extra(
        is_public=True,
        data_lookup="url",
    )
    beschriftung = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Beschriftung",
        help_text="Beschriftung",
    ).set_extra(
        is_public=True,
        data_lookup="beschriftung",
    )
    literatur = models.ForeignKey(
        "Literatur",
        related_name='rvn_weblit_literatur_literatur',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Literatur",
        help_text="Literatur",
    ).set_extra(
        is_public=True,
        data_lookup="lit_id",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'url',
        ]
        verbose_name = "Link zu Literatur"
    
    def __str__(self):
        if self.url:
            return "{}".format(self.url)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:weblit_browse')
    
    @classmethod
    def get_source_table(self):
        return "liturl"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:weblit_create')

    def get_absolute_url(self):
        return reverse('archiv:weblit_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:weblit_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:weblit_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:weblit_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:weblit_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:weblit_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class WerkInstanz(models.Model):
    ### Beschreibt ein konkrete Werk ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=True,
        data_lookup="ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    werk_titel = models.TextField(
        blank=True, null=True,
        verbose_name="Titel des Werkes",
        help_text="Titel des Werkes",
    ).set_extra(
        is_public=True,
        data_lookup="werktitel",
        arche_prop="hasTitel",
    )
    werk_titel_alt = models.TextField(
        blank=True, null=True,
        verbose_name="Alternativer Werktitel",
        help_text="Alternativer Werktitel",
    ).set_extra(
        is_public=True,
        data_lookup="werktitel2",
        arche_prop="hasAlternativeTitel",
    )
    textzeuge_kommentar = models.TextField(
        blank=True, null=True,
        verbose_name="Kommentar zum Textzeugen",
        help_text="Kommentar zum Textzeugen",
    ).set_extra(
        is_public=True,
        data_lookup="textzeuge_kommentar",
    )
    sprache = models.ForeignKey(
        SkosConcept,
        related_name='rvn_werkinstanz_sprache_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Sprache",
        help_text="Sprache",
    ).set_extra(
        is_public=True,
        data_lookup="sprache",
    )
    fol_start = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folio Beginn",
        help_text="Folio Beginn",
    ).set_extra(
        is_public=True,
        data_lookup="fol_start",
    )
    fol_end = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folio Ende",
        help_text="Folio Ende",
    ).set_extra(
        is_public=True,
        data_lookup="fol_end",
    )
    fol_sort = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folio (Sortierung)",
        help_text="Folio (Sortierung)",
    ).set_extra(
        is_public=True,
        data_lookup="fol_sort",
    )
    manuscript = models.ForeignKey(
        "Manuscript",
        related_name='rvn_werkinstanz_manuscript_manuscript',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Manuscript",
        help_text="Manuscript",
    ).set_extra(
        is_public=True,
        data_lookup="ms_code",
    )
    autor = models.ForeignKey(
        "Autor",
        related_name='rvn_werkinstanz_autor_autor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Autor",
        help_text="Autor",
    ).set_extra(
        is_public=True,
        data_lookup="autor",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'legacy_pk',
        ]
        verbose_name = "Instanz eines Werkes"
    
    def __str__(self):
        if self.werk_titel:
            return "{}".format(self.werk_titel)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:werkinstanz_browse')
    
    @classmethod
    def get_source_table(self):
        return "aut"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:werkinstanz_create')

    def get_absolute_url(self):
        return reverse('archiv:werkinstanz_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:werkinstanz_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:werkinstanz_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:werkinstanz_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:werkinstanz_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:werkinstanz_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Zitat(models.Model):
    ### Zitat ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=True,
        data_lookup="ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    literatur = models.ForeignKey(
        "Literatur",
        related_name='rvn_zitat_literatur_literatur',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Literatur",
        help_text="Literatur",
    ).set_extra(
        is_public=True,
        data_lookup="lit_id",
    )
    manuscript = models.ForeignKey(
        "Manuscript",
        related_name='rvn_zitat_manuscript_manuscript',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Manuscript",
        help_text="Manuscript",
    ).set_extra(
        is_public=True,
        data_lookup="ms_code",
    )
    kz_ms = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Seite, Ausgabe, Nr. ",
        help_text="Seite, Ausgabe, Nr. ",
    ).set_extra(
        is_public=True,
        data_lookup="KZ_SM",
    )
    signatur = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Signatur",
        help_text="Signatur",
    ).set_extra(
        is_public=True,
        data_lookup="Signatur",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'literatur',
        ]
        verbose_name = "Zitat"
    
    def __str__(self):
        if self.literatur:
            return "{}".format(self.literatur)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:zitat_browse')
    
    @classmethod
    def get_source_table(self):
        return "litsig"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:zitat_create')

    def get_absolute_url(self):
        return reverse('archiv:zitat_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:zitat_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:zitat_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:zitat_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:zitat_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:zitat_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


