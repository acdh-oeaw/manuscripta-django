# generated by appcreator
import django_filters
from django import forms

from dal import autocomplete

from vocabs.filters import generous_concept_filter
from vocabs.models import SkosConcept
from . models import (
    Bibliothek,
    Initium,
    Manuscript,
    MsDesc,
    MsPart,
    Place,
    Verfasser
)


class BibliothekListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Bibliothek._meta.get_field('legacy_id').help_text,
        label=Bibliothek._meta.get_field('legacy_id').verbose_name
    )
    lib_code = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Bibliothek._meta.get_field('lib_code').help_text,
        label=Bibliothek._meta.get_field('lib_code').verbose_name
    )
    lib_name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Bibliothek._meta.get_field('lib_name').help_text,
        label=Bibliothek._meta.get_field('lib_name').verbose_name
    )
    lib_type = django_filters.ModelMultipleChoiceFilter(
        queryset=SkosConcept.objects.filter(
            collection__name="lib_type"
        ),
        help_text=Bibliothek._meta.get_field('lib_type').help_text,
        label=Bibliothek._meta.get_field('lib_type').verbose_name,
        method=generous_concept_filter,
        widget=autocomplete.Select2Multiple(
            url="/vocabs-ac/specific-concept-ac/lib_type",
            attrs={
                'data-placeholder': 'Autocomplete ...',
                'data-minimum-input-length': 2,
                },
        )
    )
    short_name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Bibliothek._meta.get_field('short_name').help_text,
        label=Bibliothek._meta.get_field('short_name').verbose_name
    )
    location = django_filters.ModelMultipleChoiceFilter(
        queryset=Place.objects.all(),
        help_text=Bibliothek._meta.get_field('location').help_text,
        label=Bibliothek._meta.get_field('location').verbose_name,
        widget=autocomplete.Select2Multiple(
            url="archiv-ac:place-autocomplete",
        )
    )
    address = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Bibliothek._meta.get_field('address').help_text,
        label=Bibliothek._meta.get_field('address').verbose_name
    )

    class Meta:
        model = Bibliothek
        fields = [
            'id',
            'legacy_id',
            'lib_code',
            'lib_name',
            'lib_type',
            'short_name',
            'location',
            'address',
            ]


class InitiumListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Initium._meta.get_field('legacy_id').help_text,
        label=Initium._meta.get_field('legacy_id').verbose_name
    )
    manuscript = django_filters.ModelMultipleChoiceFilter(
        queryset=Manuscript.objects.all(),
        help_text=Initium._meta.get_field('manuscript').help_text,
        label=Initium._meta.get_field('manuscript').verbose_name,
        widget=autocomplete.Select2Multiple(
            url="archiv-ac:manuscript-autocomplete",
        )
    )
    initium = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Initium._meta.get_field('initium').help_text,
        label=Initium._meta.get_field('initium').verbose_name
    )
    explicit = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Initium._meta.get_field('explicit').help_text,
        label=Initium._meta.get_field('explicit').verbose_name
    )
    fol = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Initium._meta.get_field('fol').help_text,
        label=Initium._meta.get_field('fol').verbose_name
    )
    fol_sort = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Initium._meta.get_field('fol_sort').help_text,
        label=Initium._meta.get_field('fol_sort').verbose_name
    )
    fol_end = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Initium._meta.get_field('fol_end').help_text,
        label=Initium._meta.get_field('fol_end').verbose_name
    )

    class Meta:
        model = Initium
        fields = [
            'id',
            'legacy_id',
            'legacy_pk',
            'manuscript',
            'initium',
            'explicit',
            'fol',
            'fol_sort',
            'fol_end',
            ]


class ManuscriptListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('legacy_id').help_text,
        label=Manuscript._meta.get_field('legacy_id').verbose_name
    )
    lib_code = django_filters.ModelMultipleChoiceFilter(
        queryset=Bibliothek.objects.all(),
        help_text=Manuscript._meta.get_field('lib_code').help_text,
        label=Manuscript._meta.get_field('lib_code').verbose_name,
        widget=autocomplete.Select2Multiple(
            url="archiv-ac:bibliothek-autocomplete",
        )
    )
    ms_code = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('ms_code').help_text,
        label=Manuscript._meta.get_field('ms_code').verbose_name
    )
    ms_code_sort = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('ms_code_sort').help_text,
        label=Manuscript._meta.get_field('ms_code_sort').verbose_name
    )
    shelfmark = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('shelfmark').help_text,
        label=Manuscript._meta.get_field('shelfmark').verbose_name
    )
    heading = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('heading').help_text,
        label=Manuscript._meta.get_field('heading').verbose_name
    )
    material = django_filters.ModelMultipleChoiceFilter(
        queryset=SkosConcept.objects.filter(
            collection__name="material"
        ),
        help_text=Manuscript._meta.get_field('material').help_text,
        label=Manuscript._meta.get_field('material').verbose_name,
        method=generous_concept_filter,
        widget=autocomplete.Select2Multiple(
            url="/vocabs-ac/specific-concept-ac/material",
            attrs={
                'data-placeholder': 'Autocomplete ...',
                'data-minimum-input-length': 2,
                },
        )
    )
    num_leaves = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('num_leaves').help_text,
        label=Manuscript._meta.get_field('num_leaves').verbose_name
    )
    dimensions = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('dimensions').help_text,
        label=Manuscript._meta.get_field('dimensions').verbose_name
    )
    origin_date = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('origin_date').help_text,
        label=Manuscript._meta.get_field('origin_date').verbose_name
    )
    prov = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('prov').help_text,
        label=Manuscript._meta.get_field('prov').verbose_name
    )
    fragm = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('fragm').help_text,
        label=Manuscript._meta.get_field('fragm').verbose_name
    )
    remarks = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('remarks').help_text,
        label=Manuscript._meta.get_field('remarks').verbose_name
    )
    geschichte = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Manuscript._meta.get_field('geschichte').help_text,
        label=Manuscript._meta.get_field('geschichte').verbose_name
    )

    class Meta:
        model = Manuscript
        fields = [
            'id',
            'legacy_id',
            'legacy_pk',
            'lib_code',
            'ms_code',
            'ms_code_sort',
            'shelfmark',
            'heading',
            'material',
            'num_leaves',
            'dimensions',
            'origin_date',
            'prov',
            'fragm',
            'hscensus',
            'remarks',
            'geschichte',
            ]


class MsDescListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=MsDesc._meta.get_field('legacy_id').help_text,
        label=MsDesc._meta.get_field('legacy_id').verbose_name
    )
    manuscript = django_filters.ModelMultipleChoiceFilter(
        queryset=Manuscript.objects.all(),
        help_text=MsDesc._meta.get_field('manuscript').help_text,
        label=MsDesc._meta.get_field('manuscript').verbose_name,
        widget=autocomplete.Select2Multiple(
            url="archiv-ac:manuscript-autocomplete",
        )
    )
    bibliography = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=MsDesc._meta.get_field('bibliography').help_text,
        label=MsDesc._meta.get_field('bibliography').verbose_name
    )
    phys_desc = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=MsDesc._meta.get_field('phys_desc').help_text,
        label=MsDesc._meta.get_field('phys_desc').verbose_name
    )
    content = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=MsDesc._meta.get_field('content').help_text,
        label=MsDesc._meta.get_field('content').verbose_name
    )
    verfasser = django_filters.ModelMultipleChoiceFilter(
        queryset=Verfasser.objects.all(),
        help_text=MsDesc._meta.get_field('verfasser').help_text,
        label=MsDesc._meta.get_field('verfasser').verbose_name,
        widget=autocomplete.Select2Multiple(
            url="archiv-ac:verfasser-autocomplete",
        )
    )

    class Meta:
        model = MsDesc
        fields = [
            'id',
            'legacy_id',
            'legacy_pk',
            'manuscript',
            'bibliography',
            'phys_desc',
            'content',
            'verfasser',
            'created',
            ]


class MsPartListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=MsPart._meta.get_field('legacy_id').help_text,
        label=MsPart._meta.get_field('legacy_id').verbose_name
    )
    part_of_manuscript = django_filters.ModelMultipleChoiceFilter(
        queryset=Manuscript.objects.all(),
        help_text=MsPart._meta.get_field('part_of_manuscript').help_text,
        label=MsPart._meta.get_field('part_of_manuscript').verbose_name,
        widget=autocomplete.Select2Multiple(
            url="archiv-ac:manuscript-autocomplete",
        )
    )
    range = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=MsPart._meta.get_field('range').help_text,
        label=MsPart._meta.get_field('range').verbose_name
    )
    date_str = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=MsPart._meta.get_field('date_str').help_text,
        label=MsPart._meta.get_field('date_str').verbose_name
    )
    origin_date = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=MsPart._meta.get_field('origin_date').help_text,
        label=MsPart._meta.get_field('origin_date').verbose_name
    )

    class Meta:
        model = MsPart
        fields = [
            'id',
            'legacy_id',
            'legacy_pk',
            'part_of_manuscript',
            'range',
            'date_str',
            'origin_date',
            'date_begin',
            'date_end',
            ]


class PlaceListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Place._meta.get_field('legacy_id').help_text,
        label=Place._meta.get_field('legacy_id').verbose_name
    )
    name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Place._meta.get_field('name').help_text,
        label=Place._meta.get_field('name').verbose_name
    )

    class Meta:
        model = Place
        fields = [
            'id',
            'legacy_id',
            'name',
            ]


class VerfasserListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Verfasser._meta.get_field('legacy_id').help_text,
        label=Verfasser._meta.get_field('legacy_id').verbose_name
    )
    name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Verfasser._meta.get_field('name').help_text,
        label=Verfasser._meta.get_field('name').verbose_name
    )

    class Meta:
        model = Verfasser
        fields = [
            'id',
            'legacy_id',
            'name',
            ]


